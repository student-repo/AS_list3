[1]Marcin Zawada [2]logo actualHistory zad1 zad1_without_function zad2 zad3 zad4 [3]Home actualHistory zad1 zad1_without_function zad2 zad3 zad4 [4]Papers actualHistory zad1 zad1_without_function zad2 zad3 zad4 [5]Teaching (in Polish) Architektura komputerów i systemy operacyjne actualHistory zad1 zad1_without_function zad2 zad3 zad4 Wykład: + Wtorek, godz. 11:15 A-1 314 + Piątek, godz. 7:30 A-1 314 Zasady zaliczenia kursu actualHistory zad1 zad1_without_function zad2 zad3 zad4 Zasady zaliczenia laboratorium: pod uwagę będą brane umiejętności nabyte w trakcie kursu oraz terminowość oddawania zadań. actualHistory zad1 zad1_without_function zad2 zad3 zad4 Zasady zaliczenia ćwiczeń: kolokwia w tygodniach [DEL: 47 :DEL] 48 oraz 4 + Punktacja - na każdym kolokwium można zdobyć maks. 15pt + punkty za aktywność na ćwiczeniach o ocena 5.5 >=37pt o ocena 5.0 >=27pt <36pt o ocena 4.5 >=24pt <27pt o ocena 4.0 >=21pt <24pt o ocena 3.5 >=18pt <21pt o ocena 3.0 >=15pt <18pt actualHistory zad1 zad1_without_function zad2 zad3 zad4 Egzamin + Podstawowy: 6.02.2017 godz. 7:15 sala 322 A-1 + Poprawka: 13.02.2017 godz. 7:15 sala 322 A-1 actualHistory zad1 zad1_without_function zad2 zad3 zad4 Ocena końcowa: if $\mbox{Ćwiczenia} \geqslant 3.0 \land \mbox{Laboratorium} \geqslant 3.0 \land \mbox{Egzamin} \geqslant 3.0$ then $0.3 \cdot \mbox{Ćwiczenia} + 0.3 \cdot \mbox{Laboratorium} + 0.4 \cdot \mbox{Egzamin}$ else $2.0$ Wykłady Architektura komputerów Systemy operacyjne [6]Wykład 4.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 Historia procesorów + [7]Intel 4004 + [8]Visual 6502 + [9]Intel's 15 Most Unforgettable x86 CPUs actualHistory zad1 zad1_without_function zad2 zad3 zad4 Historia komputerów + [10]krótka historia actualHistory zad1 zad1_without_function zad2 zad3 zad4 Historia [11]Uniksa + [12]Klasyczna książka - kod źródłowy z komentarzami + [13]Kody źródłowe i podręczniki różnych wersji Uniksa + [14]Eric Steven Raymond - The Art of Unix Programming + [15]DEC PDP-11 o [16]Programowanie PDP-11 o [17]Emulator PDP-11 napisany w JavaScript o PDP-11 [18]link1, [19]link2, [20]link3 + Nowoczesna reimplementacja Uniksa V6 na procesory x86: o [21]strona projektu o [22]kod źródłowy projektu o [23]książka z kodem źródłowym actualHistory zad1 zad1_without_function zad2 zad3 zad4 [24]Virtual x86 - emulacja komputera PC z możliwością uruchomienia różnych systemów operacyjnych actualHistory zad1 zad1_without_function zad2 zad3 zad4 [25]Pierwszy emulator PC napisany w JavaScript przez Fabrice'a Bellard'a + [26]dane techniczne Wykład 7.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [27]Reprezentacja liczb actualHistory zad1 zad1_without_function zad2 zad3 zad4 Systemy liczbowe actualHistory zad1 zad1_without_function zad2 zad3 zad4 Konwersja actualHistory zad1 zad1_without_function zad2 zad3 zad4 Arytmetyka binarna actualHistory zad1 zad1_without_function zad2 zad3 zad4 Kody uzupełnieniowe [28]Wykład 11.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [29]Historia terminali VT actualHistory zad1 zad1_without_function zad2 zad3 zad4 [30]Unix Operating System actualHistory zad1 zad1_without_function zad2 zad3 zad4 [31]Wprowadzenie oraz obsługa systemu plików actualHistory zad1 zad1_without_function zad2 zad3 zad4 [32]Procesy w systemie operacyjnym Wykład 14.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 Algebra Boole'a actualHistory zad1 zad1_without_function zad2 zad3 zad4 [33]George Boole, "Mathematical Analysis of Logic", [34]wersja zeskanowana actualHistory zad1 zad1_without_function zad2 zad3 zad4 [35]Claude Shannon, "The Synthesis of Two Terminal Switching Circuits" [36]Wykład 18.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [37]Filtry, strumienie standardowe oraz przetwarzanie potokowe actualHistory zad1 zad1_without_function zad2 zad3 zad4 [38]Tworzenie skryptów powłoki systemu operacyjnego actualHistory zad1 zad1_without_function zad2 zad3 zad4 [39]The Open Group Base Specifications Issue 7, IEEE Std 1003.1™-2008, 2016 Edition + [40]Shell Command Language + [41]Wersja PDF specyfikacji (do pobrania z komputerów podpiętych do sieci PWR) Wykład 21.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 Algebra Boole'a (c.d.) actualHistory zad1 zad1_without_function zad2 zad3 zad4 [42]Siatki Karnaugh actualHistory zad1 zad1_without_function zad2 zad3 zad4 [43]Karnaugh, Maurice "The Map Method for Synthesis of Combinational Logic Circuits" [44]Wykład 25.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [45]Obsługa systemu plików actualHistory zad1 zad1_without_function zad2 zad3 zad4 [46]Obsługa potoków actualHistory zad1 zad1_without_function zad2 zad3 zad4 [47]Planowanie przydziału procesora + [48]Process scheduler - [49]Completely Fair Scheduler + [50]I/O scheduling - [51]Completely Fair Queuing Wykład 28.10.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [52]Minimalizacja funkcji boolowskich z wykorzystaniem siatek Karnaugh actualHistory zad1 zad1_without_function zad2 zad3 zad4 [53]Układy [54]kombinacyjne [55]Wykład 8.11.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [56]Obsługa procesów w systemie Wykład 9.11.2016 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [57]Szybkie dodawanie actualHistory zad1 zad1_without_function zad2 zad3 zad4 [58]Jednostka arytmetyczno-logiczna (ALU) actualHistory zad1 zad1_without_function zad2 zad3 zad4 [59]Układy sekwencyjne [60]Wykład 18.11.2015 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [61]Wątki actualHistory zad1 zad1_without_function zad2 zad3 zad4 [62]Pamięć współdzielona Ćwiczenia actualHistory zad1 zad1_without_function zad2 zad3 zad4 [63]Lista 1 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [64]Lista 2 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [65]Lista 3 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [66]Lista 4 actualHistory zad1 zad1_without_function zad2 zad3 zad4 [67]Lista 5 Laboratorium Zasady zaliczenia laboratorium actualHistory zad1 zad1_without_function zad2 zad3 zad4 Ocena z laboratorium bierze pod uwagę umiejętności nabyte w trakcie kursu oraz terminowość oddawania zadań actualHistory zad1 zad1_without_function zad2 zad3 zad4 Rozwiązania zadań należy wysyłać w terminie na przydzielone konto SVN, poza pierwszą listy którą należy oddać w terminie actualHistory zad1 zad1_without_function zad2 zad3 zad4 Rozwiązania zadań wysłane po danym terminie, ale do 1 tygodnia liczone są maks. za połowę punktów, po terminie 1 tygodnia liczone są za ZERO punktów actualHistory zad1 zad1_without_function zad2 zad3 zad4 Wysłane rozwiązania, należy oddać na laboratorium, bez straty punktów na pierwszych lub drugich zajęciach po terminie SVN, na trzecich zajęciach (bez usprawiedliwień) zadania liczone są maks. za połowę punktów na czwartych zajęciach zadania liczone są za ZERO punktów (nawet zadania wysłane w terminie na SVN) Lista 1 (Lab) Termin oddania do 14.10.2016 Prowadzący laboratorium pomogą na pierwszych zajęciach wykonać zadania. Następnie przy oddawaniu studenci wykonają samodzielnie wybrane z listy polecenia z każdego zadania. 1. (2pt) Zainstaluj program do wirtualizacji [68]VirtualBox. Zapoznaj się z programem. 2. (5pt) Zainstaluj w środowisku wirtualnym (VirtualBox) dystrybucję Linuksa [69]Ubuntu. Pobierz obraz systemu [70]tutaj, wybierając odpowiednio [71]32 (lokalna kopia), jeśli wystąpił problem z instalacją to proszę zainstalować [72]Ubuntu 14.04 lub [73]64 (lokalna kopia) bitową wersję systemu. Naucz się podstawowych komend obsługi systemu z konsoli np. cd, ls, cat, less, apt-get itp. 3. (8pt) Zainstaluj w środowisku wirtualnym (VirtualBox) dystrybucję Linuksa [74]Arch Linux. Pobierz obraz systemu [75]tutaj, wybierając (w czasie instalacji) odpowiednio [76]32 (i686) lub 64 (x86_64) bitową wersję systemu. Naucz się podstawowych informacji o systemie oraz umiej wytłumaczyć w kilku zdaniach co najmniej + Co to jest [77]BIOS? + Co to jest [78]GPT, [79]MBR? + Co to jest i jak obsługiwać program do robienia partycji dysku np. [80]fdisk? Wykonaj podstawowe polecenia programu samodzielnie w maszynie wirtualnej + Co to jest [81]system plików i jakie systemy plików wykorzystuje Linux? [82]Przykładowa instalacja Arch Linuksa i [83]instrukcja. Uwaga: Można wykorzystać też dowolny inny program do wirtualizacji zamiast programu VirtualBox np. QEMU, VMWare Player, ... Lista 2 (Lab) Termin wysłania na [84]SVN do 30.10.2016 1. (5pt) Wytłumacz jakie pliki zawierają katalogi /dev oraz /proc. Wykorzystując polecenie dd odczytaj pierwszy sektor z dysku głównego (uwaga na prawa dostępu) lub podpiętego pendrive'a i wyświetl przez hexdump -C. Z katalogu proc wyświetl informacje o pamięci oraz procesorze. 2. (5pt) Zapoznaj się z programem ps (man ps). Naucz się posługiwać tym programem, aby umieć sprawdzać co najmniej istnienie i parametry wybranych procesów (PID procesu i rodzica, stan procesu, priorytet, nice, ilość pamięci, zużycie czasu procesora). Uruchom też kilka terminali pokaż jakie urządzenie tty wykorzystują. Wykonując komendę ps axjf pokaż wszystkie procesy które podpięte są do tych terminali (kolumna TTY). 3. (5pt) Zapoznaj się z kompilatorem języka C (polecenie gcc) oraz języka C++ (polecenie g++). Uruchom poniższy program w języku C. $ cat > test.c #include <stdio.h> int main(int argc, char *argv[]) { printf("Hello, World!\n"); return 0; } ^D $ gcc -Wall -pedantic test.c $ ./a.out Wytłumacz każdy z powyższych kroków. Co oznaczają opcje -Wall oraz -pedantic? Zobacz man gcc. 4. (5pt) Uruchom potok co najmniej trzech poleceń działających przez jakiś zauważalny czas. Mogą to być odpowiednio dobrane polecenia systemowe. Sprawdź poleceniem ps i odpowiedz jakie zachodzi pokrewieństwo między tymi procesami (jeśli w ogóle zachodzi) 5. (5pt) Poleceniem mkfifo (man mkfifo) utwórz potok nazwany (ang. named FIFO). Wywołując polecenie cat w różnych terminalach spowoduj wpisywanie danych do potoku przez jeden(ne) proces(y), i odczytywanie i wyświetlanie ich przez inne. Zaobserwuj, kiedy polecenie cat czytające z potoku czeka na więcej danych, a kiedy kończy pracę. Analogicznie, kiedy czeka na więcej danych (z klawiatury) polecenie cat piszące do potoku? 6. (8pt) Napisz program w języku C, który wykorzystując [85]sekwencje Esc (ang. escape sequences) standardu ANSI wyświetli na ekranie napis "Hello, World!", po kolei we wszystkich dostępnych przez terminal kolorach. Czy terminal może wyświetlić 256 kolorów? 7. (10pt) Napisz potok poleceń, który zamienia wszystkie nazwy plików w danym katalogu (bez podkatalogów) na małe litery, czyli wszystkie duże litery występujące w nazwach plików zostaną zamienione na małe, a małe litery pozostają oczywiście dalej małe. Przykład konwersji stron podręcznika man do formatu PDF: $ man -t ps | ps2pdf - ps.pdf $ man -t gcc | ps2pdf - gcc.pdf $ # Dla czcionek 'Courier' $ zcat $(man -w gcc) | groff -Tps -fC -mandoc | ps2pdf - "gcc.pdf" W przypadku braku programu ps2pdf, należy zainstalować pakiet ghostscript np. pod archlinuksem: # pacman -S ghostscript Lista 3 (Lab) Termin wysłania na [86]SVN do 13.11.2016 1. (7pt) Napisz prosty skrypt w bashu, który co sekundę pokazuje następujące informacje o systemie + Aktualną i średnią prędkość przesyłania danych po interfejsach sieciowych (odczytaj i zinterpretuj /proc/net/dev oraz wyświetl w B, KB lub MB w zależność od aktualnej prędkości) + Jak długo system jest uruchomiony w dniach, godzinach, minutach i sekundach (/proc/uptime) + Aktualny stan baterii w procentach (/sys/class/power_supply/BAT0/uevent) 2. (8pt) Napisz prosty skrypt w bashu, który pokazuje informacje o wszystkich procesach (podobne jak program ps). Wykorzystaj system plików procfs (standardowo w systemie Linux montowanym w katalogu /proc) do pobrania informacji o procesach np. cat /proc/1/status wyświetla informacje o procesie 1. 3. (10pt) Napisz skrypt w Bashu, który przechowuje historię zmian podanej strony z internetu i powiadamia użytkownika w momentach zmian na stronie (do powiadamiania można wykorzystać komendę xmessage, zenity lub echo z terminala i wyświetlić zmiany). Przykładowe wywołanie programu $ ./webtrace.sh "http://ki.pwr.edu.pl" 600 gdzie pierwszym parametrem jest adres śledzonej strony, a drugim parametrem jest czas w sekundach co jaki strona będzie pobierana i sprawdzana czy nastąpiła zmiana, czyli w powyższym przykładzie strona http://ki.pwr.edu.pl będzie sprawdzana co 10 minut. Wskazówka: Do pobrania strony można wykorzystać np. lynx -dump http://ki.pwr.edu.pl (man lynx, instalacja pacman -S lynx) lub links (man links, instalacja pacman -S links) lub w3m (man w3m, instalacja pacman -S w3m) lub ... . Do sprawdzania zmian na stronie: diff (man diff), ... . Do pamiętania historii można wykorzystać program git, instalacja pacman -S git. 4. (10pt) Napisz skrypt w Bashu, który znajduje takie same pliki w podanym katalogu oraz podkatalogach i wyświetla je w terminalu posortowane w kolejności malejącej po wielkościach plików (z pełną ścieżką), czyli na początku zostaną wyświetlone duplikaty plików które zajmują najwięcej miejsca na dysku. Pliki są takie same jeśli mają taką samą zawartość nie jeśli mają takie same nazwy i/lub wielkość. Przykładowe wywołanie programu $ ./searchdup /bin gdzie pierwszym parametrem jest katalog w którym, mają zostać znalezione duplikaty plików. Wskazówka: Na początku najlepiej jest obliczyć [87]hash wszystkich plików np. [88]md5sum (man md5sum), później można efektywnie ( O(nlogn) ) znaleźć pliki które są takie same. Lista 4 (Lab) Termin wysłania na [89]SVN do 27.11.2016 1. (5pt) Napisz program w języku C, który uruchomi powłokę (Bash) z prawami roota. Po kompilacji programu można ustawić mu (z poziomu roota) dowolne atrybuty (np. patrz [90]SUID). Następnie już z poziomu dowolnego użytkownika uruchamiając program uruchamia się konsola administratora, podobnie jak sudo /bin/bash (bez wprowadzania hasła). 2. (5pt) Napisz w języku C programy testujące, które odpowiedzą na następujące pytania: + Czy można napisać program do obsługi wszystkich sygnałów (patrz kill -l)? Napisz program prezentujący odpowiedź. + Czy jest możliwe wysłać sygnał SIGKILL, lub inny do procesu init czyli np. kill -9 1 (nawet będąc rootem)? + Czy sygnały są kolejkowane? Np. napisz program testowy wysyłający wiele razy do danego procesu sygnał (np. SIGUSR1) i zobacz czy wszystkie dotarły. 3. (5pt) Zaimplementuj w języku C prostą wersję powłoki o nazwie lsh. Jak prawdziwa powłoka, lsh odczytuje linię ze standardowego wejścia i przeszukuje ścieżki ze zmiennej PATH (inaczej mówiąc zamiast execve wykonuje execvp) i wykonuje podany program. Proszę pamiętać o ustawieniu argumentów wykonywanej komendy. Jeśli linia kończy się znakiem (&), wtedy lsh powinien nie czekać aż komenda zostanie skończona i od razu wrócić. W innym przypadku lsh powinien zaczekać, aż program wykona się. lsh powinien skończyć swoje działanie naciskając klawisze Control+D lub pisząc exit. 4. (10pt) Zaimplementuj w programie lsh z poprzedniego zadania potoki | (ang. pipe) oraz przekierowanie standardowego wejścia (<), wyjścia (>) oraz wyjścia błędu (2>). Wskazówka: Zobacz program [91]lssort.c. 5. (15pt)* Napisz w języku C prostą aplikację klienta-serwera z wykorzystaniem potoków nazwanych do komunikacji. Program powinien pozwalać na tzw. "rozmowę", czyli po uruchomieniu serwera powinien on umożliwić podłączenie co najmniej trzech klientów. Następnie każdy z klientów (załóżmy, że każdy klient uruchomiany jest w osobnym oknie terminala) pozwala na wprowadzenie tekstu z klawiatury i po zatwierdzeniu wyświetla się on u wszystkich podłączonym klientów. Wskazówka: Przy pierwszym połączeniu z serwerem (serwer odczytuje komunikaty np. z /tmp/server_pipe) serwer tworzy nowe potoki do komunikacji z klientem np. /tmp/server-pipe.6578, gdzie 6578 do PID klienta itd. [92]HTML5 | [93]CSS References 1. http://cs.pwr.edu.pl/osoba.php?lang=eng&NICK=MZA 2. http://www.pwr.edu.pl/ 3. http://cs.pwr.edu.pl/zawada/index.php 4. http://cs.pwr.edu.pl/zawada/papers.php 5. http://cs.pwr.edu.pl/zawada/teaching.php 6. http://cs.pwr.edu.pl/zawada/akiso/download/20161004 7. http://www.4004.com/ 8. http://visual6502.org/JSSim/index.html 9. http://www.tomshardware.com/reviews/intel-cpu-history,1986.html 10. http://www.computerhistory.org/timeline/computers/ 11. http://pl.wikipedia.org/wiki/Unix 12. http://v6.cuzuco.com/ 13. http://minnie.tuhs.org/cgi-bin/utree.pl 14. http://www.catb.org/~esr/writings/taoup/html/ 15. http://en.wikipedia.org/wiki/PDP-11 16. http://www.youtube.com/results?search_query=programming pdp-11 17. http://pdp11.aiju.de/ 18. http://www.psych.usyd.edu.au/pdp-11/ 19. http://www.pdp11.org/ 20. http://minnie.tuhs.org/Archive/PDP-11/ 21. http://pdos.csail.mit.edu/6.828/2016/xv6.html 22. https://github.com/mit-pdos/xv6-public 23. http://pdos.csail.mit.edu/6.828/2016/xv6/xv6-rev9.pdf 24. http://copy.sh/v86 25. http://bellard.org/jslinux/ 26. http://bellard.org/jslinux/tech.html 27. http://wazniak.mimuw.edu.pl/index.php?title=WDP_Reprezentacja_liczb 28. http://cs.pwr.edu.pl/zawada/akiso/download/20161011 29. http://vt100.net/vt_history 30. https://youtu.be/tc4ROCJYbm0?t=249 31. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_2 32. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_3 33. http://www.gutenberg.org/ebooks/36884 34. https://archive.org/details/mathematicalanal01bool 35. https://archive.org/details/bstj28-1-59 36. http://cs.pwr.edu.pl/zawada/akiso/download/20161018 37. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_4 38. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_5 39. http://pubs.opengroup.org/onlinepubs/9699919799/ 40. http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html 41. http://ieeexplore.ieee.org/document/6506091/ 42. https://en.wikipedia.org/wiki/Karnaugh_map 43. https://dx.doi.org/10.1109/TCE.1953.6371932 44. http://cs.pwr.edu.pl/zawada/akiso/download/20161025 45. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_6 46. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_8 47. http://wazniak.mimuw.edu.pl/index.php?title=SO-1st-2.3-w3.tresc-1.0-toc 48. https://en.wikipedia.org/wiki/Process_scheduler 49. https://en.wikipedia.org/wiki/Completely_Fair_Scheduler 50. https://en.wikipedia.org/wiki/I/O_scheduling 51. https://en.wikipedia.org/wiki/CFQ 52. https://en.wikipedia.org/wiki/Karnaugh_map 53. https://en.wikipedia.org/wiki/Logic_gate 54. https://en.wikipedia.org/wiki/Combinational_logic 55. http://cs.pwr.edu.pl/zawada/akiso/download/20161108 56. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_7 57. https://en.wikipedia.org/wiki/Carry-lookahead_adder 58. https://en.wikipedia.org/wiki/Arithmetic_logic_unit 59. https://en.wikipedia.org/wiki/Sequential_logic 60. http://cs.pwr.edu.pl/zawada/akiso/download/20161118 61. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_9 62. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_11 63. http://cs.pwr.edu.pl/zawada/akiso/lista1.php 64. http://cs.pwr.edu.pl/zawada/akiso/lista2.php 65. http://cs.pwr.edu.pl/zawada/akiso/lista3.php 66. http://cs.pwr.edu.pl/zawada/akiso/lista4.php 67. http://cs.pwr.edu.pl/zawada/akiso/lista5.php 68. https://www.virtualbox.org/ 69. http://www.ubuntu.com/ 70. http://www.ubuntu.com/download/desktop/ 71. http://cs.pwr.edu.pl/zawada/akiso/ubuntu-16.04.1-desktop-i386.iso 72. http://cs.pwr.edu.pl/zawada/akiso/ubuntu-14.04.5-desktop-i386.iso 73. http://cs.pwr.edu.pl/zawada/akiso/ubuntu-16.04.1-desktop-amd64.iso 74. https://www.archlinux.org/ 75. https://www.archlinux.org/download/ 76. http://cs.pwr.edu.pl/zawada/akiso/archlinux-2016.10.01-dual.iso 77. http://en.wikipedia.org/wiki/BIOS 78. http://en.wikipedia.org/wiki/GUID_Partition_Table 79. http://en.wikipedia.org/wiki/Master_Boot_Record 80. http://en.wikipedia.org/wiki/Fdisk 81. https://pl.wikipedia.org/wiki/System_plików 82. https://www.youtube.com/watch?v=Wqh9AQt3nho 83. https://wiki.archlinux.org/index.php/Installation_guide 84. http://pl.wikipedia.org/wiki/Subversion 85. http://ascii-table.com/ansi-escape-sequences.php 86. http://pl.wikipedia.org/wiki/Subversion 87. http://pl.wikipedia.org/wiki/Funkcja_skrótu 88. http://pl.wikipedia.org/wiki/Md5sum 89. http://pl.wikipedia.org/wiki/Subversion 90. https://en.wikipedia.org/wiki/Setuid 91. http://cs.pwr.edu.pl/zawada/akiso/lssort.php 92. http://validator.w3.org/check?uri=referer 93. http://jigsaw.w3.org/css-validator/check/referer
